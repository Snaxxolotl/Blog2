{
	"info": {
		"_postman_id": "9409d1ca-ec4f-40ee-a6e5-f8826d64743f",
		"name": "Blog - user request collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31066698"
	},
	"item": [
		{
			"name": "Guest invalid authorization requests",
			"item": [
				{
					"name": "Availability",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "ec2-3-122-205-248.eu-central-1.compute.amazonaws.com",
							"host": [
								"ec2-3-122-205-248",
								"eu-central-1",
								"compute",
								"amazonaws",
								"com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - get all user list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/all",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - get my profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/me",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - new category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"testcategory\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/categories",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - get all categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{api}}/categories",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - make a post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"postTitle\": \"almafa\",\r\n    \"postBody\": \"sok almafa\",\r\n    \"tag\": \"asd\",\r\n    \"highlighted\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/posts/:categoryId",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"posts",
								":categoryId"
							],
							"variable": [
								{
									"key": "categoryId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - update a post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"postTitle\": \"almafa\",\r\n    \"postBody\": \"sok almafa\",\r\n    \"tag\": \"asd\",\r\n    \"highlighted\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/posts/:postId/:categoryId",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"posts",
								":postId",
								":categoryId"
							],
							"variable": [
								{
									"key": "postId",
									"value": "1"
								},
								{
									"key": "categoryId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Valid user tests",
			"item": [
				{
					"name": "New User  valid- role: user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"randomUsername\", response.username);\r",
									"pm.environment.set(\"oldUserame\", response.displayName);\r",
									"\r",
									"pm.environment.set(\"randomEmail\", response.email);\r",
									"pm.environment.set(\"oldEmail\", response.email);\r",
									"\r",
									"pm.environment.set(\"randomDisplayName\", response.displayName);\r",
									"pm.environment.set(\"oldDisplayName\", response.displayName);\r",
									"\r",
									"\r",
									"pm.environment.set(\"id\", response.id);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login valid - registered user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"accessToken\", response.accessToken);\r",
									"\r",
									"pm.environment.set(\"refreshToken\", response.refreshToken);\r",
									"\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{randomUsername}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh token valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"accessToken\", response.accessToken);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshToken}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/token/refresh",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"token",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change user data valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const currUsername = pm.environment.get(\"randomUsername\");\r",
									"const currEmail = pm.environment.get(\"randomEmail\");\r",
									"const oldName = pm.environment.get(\"oldName\");\r",
									"\r",
									"pm.test(\"Username didn't change\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(currUsername);\r",
									"});\r",
									"\r",
									"pm.test(\"Email didn't change\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(currEmail);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"random_displayName\", response.displayName);\r",
									"const currDisplayName = pm.environment.get(\"randomDisplayName\");\r",
									"\r",
									"pm.test(\"Display Name successfully changed\", function () {\r",
									"    pm.expect(oldName).not.equal(currDisplayName);\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"\",\r\n    \"email\": \"\",\r\n    \"displayName\": \"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/update",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current user data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const currUsername = pm.environment.get(\"randomUsername\");\r",
									"const currEmail = pm.environment.get(\"randomEmail\");\r",
									"\r",
									"\r",
									"pm.test(\"Correct username\", function () {\r",
									"    pm.expect(currUsername).to.equal(response.username);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct email\", function () {\r",
									"    pm.expect(currEmail).to.equal(response.email);\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/me",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Correct response\", function () {\r",
									"    pm.expect(pm.response.text()).to.equal(\"Jelszó sikeresen megváltoztatva!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"oldPassword\": \"{{password}}\",\r\n    \"newPassword\": \"{{newPassword}}\",\r\n    \"newPasswordAgain\": \"{{newPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/changepassword",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"changepassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login invalid - check password change",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{randomUsername}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User invalid authorization requests",
			"item": [
				{
					"name": "Refresh token valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"accessToken\", response.accessToken);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshToken}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/token/refresh",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"token",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - get all user list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/all",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - new category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"testcategory\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/categories",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - get all categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{api}}/categories",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - make a post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"postTitle\": \"almafa\",\r\n    \"postBody\": \"sok almafa\",\r\n    \"tag\": \"asd\",\r\n    \"highlighted\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/posts/:categoryId",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"posts",
								":categoryId"
							],
							"variable": [
								{
									"key": "categoryId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User - update a post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"postTitle\": \"almafa\",\r\n    \"postBody\": \"sok almafa\",\r\n    \"tag\": \"asd\",\r\n    \"highlighted\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/posts/:postId/:categoryId",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"posts",
								":postId",
								":categoryId"
							],
							"variable": [
								{
									"key": "postId",
									"value": "1"
								},
								{
									"key": "categoryId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New User for deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickId\", response.id);\r",
									"pm.environment.set(\"quickUsername\", response.username);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete other user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is not 200\", function () {\r",
									"    pm.response.to.not.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/:id",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{quickId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Login assertion deleted user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"accessToken\", response.accessToken);\r",
									"\r",
									"pm.environment.set(\"refreshToken\", response.refreshToken);\r",
									"\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{quickUsername}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Valid registration - user - character cases",
			"item": [
				{
					"name": "New User  - username with hungarian letters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickId\", response.id);\r",
									"pm.environment.set(\"quickUsername\", response.username);\r",
									"pm.environment.set(\"quickDisplayName\", response.displayName);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}őáé\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with saved data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickAccessToken\", response.accessToken);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{quickUsername}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Saved data display test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const regDisplay = pm.environment.get(\"quickDisplayName\");\r",
									"const regUser = pm.environment.get(\"quickUsername\");\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regDisplay).to.equal(response.displayName);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regUser).to.equal(response.username);\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{quickAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/me",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{quickAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/:id",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{quickId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New User  - username with space",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickId\", response.id);\r",
									"pm.environment.set(\"quickUsername\", response.username);\r",
									"pm.environment.set(\"quickDisplayName\", response.displayName);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"abc {{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with saved data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickAccessToken\", response.accessToken);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{quickUsername}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Saved data display test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const regDisplay = pm.environment.get(\"quickDisplayName\");\r",
									"const regUser = pm.environment.get(\"quickUsername\");\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regDisplay).to.equal(response.displayName);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regUser).to.equal(response.username);\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{quickAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/me",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{quickAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/:id",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{quickId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New User  - displayName with hungarian letters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickId\", response.id);\r",
									"pm.environment.set(\"quickUsername\", response.username);\r",
									"pm.environment.set(\"quickDisplayName\", response.displayName);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}őáé\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with saved data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickAccessToken\", response.accessToken);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{quickUsername}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Saved data display test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const regDisplay = pm.environment.get(\"quickDisplayName\");\r",
									"const regUser = pm.environment.get(\"quickUsername\");\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regDisplay).to.equal(response.displayName);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regUser).to.equal(response.username);\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{quickAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/me",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/:id",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{quickId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New User  - displayName with space",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickId\", response.id);\r",
									"pm.environment.set(\"quickUsername\", response.username);\r",
									"pm.environment.set(\"quickDisplayName\", response.displayName);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"abc {{$randomUserName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with saved data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickAccessToken\", response.accessToken);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{quickUsername}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Saved data display test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const regDisplay = pm.environment.get(\"quickDisplayName\");\r",
									"const regUser = pm.environment.get(\"quickUsername\");\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regDisplay).to.equal(response.displayName);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regUser).to.equal(response.username);\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{quickAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/me",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/:id",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{quickId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New User  - password with hungarian letters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickUsername\", response.username);\r",
									"pm.environment.set(\"quickDisplayName\", response.displayName);\r",
									"pm.environment.set(\"quickPassword\", \"asdF6őáé\");\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}őáé\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with saved data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickAccessToken\", response.accessToken);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{quickUsername}}\",\r\n    \"password\": \"{{quickPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Saved data display test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const regDisplay = pm.environment.get(\"quickDisplayName\");\r",
									"const regUser = pm.environment.get(\"quickUsername\");\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regDisplay).to.equal(response.displayName);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regUser).to.equal(response.username);\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{quickAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/me",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{quickAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/:id",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{quickId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New User  - username with special characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickUsername\", response.username);\r",
									"pm.environment.set(\"quickDisplayName\", response.displayName);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}#&@>[\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with saved data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickAccessToken\", response.accessToken);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{quickUsername}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Saved data display test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const regDisplay = pm.environment.get(\"quickDisplayName\");\r",
									"const regUser = pm.environment.get(\"quickUsername\");\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regDisplay).to.equal(response.displayName);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regUser).to.equal(response.username);\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{quickAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/me",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{quickAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/:id",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{quickId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New User  - displayName with special characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickUsername\", response.username);\r",
									"pm.environment.set(\"quickDisplayName\", response.displayName);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}#&@>[\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with saved data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickAccessToken\", response.accessToken);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{quickUsername}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Saved data display test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const regDisplay = pm.environment.get(\"quickDisplayName\");\r",
									"const regUser = pm.environment.get(\"quickUsername\");\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regDisplay).to.equal(response.displayName);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regUser).to.equal(response.username);\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{quickAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/me",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{quickAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/:id",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{quickId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New User  - password with special characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickUsername\", response.username);\r",
									"pm.environment.set(\"quickDisplayName\", response.displayName);\r",
									"pm.environment.set(\"quickPassword\", \"asdF6#&@>[\");\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}#&@>[\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with saved data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickAccessToken\", response.accessToken);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{quickUsername}}\",\r\n    \"password\": \"{{quickPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Saved data display test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const regDisplay = pm.environment.get(\"quickDisplayName\");\r",
									"const regUser = pm.environment.get(\"quickUsername\");\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regDisplay).to.equal(response.displayName);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regUser).to.equal(response.username);\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{quickAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/me",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{quickAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/:id",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{quickId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New User  - username with numbers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickUsername\", response.username);\r",
									"pm.environment.set(\"quickDisplayName\", response.displayName);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}56\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with saved data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickAccessToken\", response.accessToken);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{quickUsername}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Saved data display test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const regDisplay = pm.environment.get(\"quickDisplayName\");\r",
									"const regUser = pm.environment.get(\"quickUsername\");\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regDisplay).to.equal(response.displayName);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regUser).to.equal(response.username);\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{quickAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/me",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{quickAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/:id",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{quickId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New User  - displayName with numbers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickUsername\", response.username);\r",
									"pm.environment.set(\"quickDisplayName\", response.displayName);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}56\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with saved data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"quickAccessToken\", response.accessToken);\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{quickUsername}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Saved data display test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const regDisplay = pm.environment.get(\"quickDisplayName\");\r",
									"const regUser = pm.environment.get(\"quickUsername\");\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regDisplay).to.equal(response.displayName);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct displayName\", function () {\r",
									"    pm.expect(regUser).to.equal(response.username);\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{quickAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/me",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{quickAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/:id",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{quickId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Invalid user registration",
			"item": [
				{
					"name": "New User invalid -empty username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"A felhasználónévnek legalább 3 karakternek kell lennie!\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid - already existing username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Már létezik ilyen felhasználónévvel felhasználó:\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{randomUsername}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid - short username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"A felhasználónévnek legalább 3 karakternek kell lennie!\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"as\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid - hungarian letters in email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Az email formátuma nem megfelelő:\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"éáő{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid - uppercase letters in email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Az email formátuma nem megfelelő:\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"ASD{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid - special characters in email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Az email formátuma nem megfelelő:\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"#&${{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid -empty email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Az email címnek legalább 5 karakternek kell lennie!\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid - already existing email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Már létezik ilyen email-el felhasználó:\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid - space in email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Az email formátuma nem megfelelő:\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"abc {{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid - short email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Az email címnek legalább 5 karakternek kell lennie!\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"as@.\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid - email no @",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Az email formátuma nem megfelelő:\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"asd.f\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid - email no .",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Az email formátuma nem megfelelő:\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"asd@f\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid -empty displayName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"A megjelenített névnek legalább 3 karakternek kell lennie!\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid - already existing displayName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Már létezik ilyen megjelenített névvel felhasználó:\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{randomDisplayName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid - already existing displayName Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Már létezik ilyen megjelenített névvel felhasználó:\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"Mittie.Abshire\",\r\n    \"email\": \"Ward.Stoltenberg91@gmail.com\",\r\n    \"displayName\": \"Okey_Johnston82\",\r\n    \"password\": \"asdF6\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid - short displayName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"A megjelenített névnek legalább 3 karakternek kell lennie!\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"as\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid -empty password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"A jelszó nem lehet üres!\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid - space in password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"A jelszó formátuma nem megfelelő.\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"abc DE45\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid - short password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"A jelszó formátuma nem megfelelő. A következő szabályoknak kell megfelelnie:\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"asD3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid -  password no uppercase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"A jelszó formátuma nem megfelelő. A következő szabályoknak kell megfelelnie:\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"asdn3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid -  password no number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"A jelszó formátuma nem megfelelő. A következő szabályoknak kell megfelelnie:\");\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"displayName\": \"{{$randomUserName}}\",\r\n    \"password\": \"asdFG\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User invalid empty fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Got 1 error message\", function () {\r",
									"    pm.expect(response).to.have.lengthOf(4);\r",
									"});\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"\",\r\n    \"email\": \"\",\r\n    \"displayName\": \"\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/save",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"save"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Invalid refresh token request",
			"item": [
				{
					"name": "Login valid - registered user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"accessToken\", response.accessToken);\r",
									"\r",
									"pm.environment.set(\"refreshToken\", response.refreshToken);\r",
									"\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{randomUsername}}\",\r\n    \"password\": \"{{newPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh token  - invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{$randomLoremSentences}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/token/refresh",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"token",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh token  - empty token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/token/refresh",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"token",
								"refresh"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User invalid login",
			"item": [
				{
					"name": "Login invalid - empty fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login invalid - empty password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{randomUsername}}\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login invalid - empty username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"{{newPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login invalid - invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{randomUsername}}s\",\r\n    \"password\": \"{{newPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login invalid - invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{randomUsername}}\",\r\n    \"password\": \"{{newPassword}}s\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Unhappy path",
			"item": [
				{
					"name": "Login valid - registered user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"accessToken\", response.accessToken);\r",
									"\r",
									"pm.environment.set(\"refreshToken\", response.refreshToken);\r",
									"\r",
									"\r",
									"console.log(response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{randomUsername}}\",\r\n    \"password\": \"{{newPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/login",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User add new user data",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"asd\": \"asdfg\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{api}}/accounts/update",
							"host": [
								"{{baseURL}}{{api}}"
							],
							"path": [
								"accounts",
								"update"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete user valid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}{{api}}/accounts/:id",
					"host": [
						"{{baseURL}}{{api}}"
					],
					"path": [
						"accounts",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		}
	]
}